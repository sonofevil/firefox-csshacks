/* The purpose of this CSS is to use line breaks to keep tab dragging working with as many tabs
as possible while at the same time keeping the number of rows as low as possible. Tab dragging
breaks with multi-row_tabs.css as soon as tabs of the same type (pinned vs. unpinned) are spread
across more than one row. But sometimes there would be enough space in the next row to accomodate
all unpinned tabs, so this stylesheet aims to move all of them to the next line together when they
run out of space in the first row (this is the more useful the more pinned tabs you have).

However, if we keep them together even when they no longer fit the second row, the advantage is
lost because dragging is broken anyway. In that case they would expand the tabbrowser to a third
row even when with just multi-row_tabs.css, only 2 lines would be needed because there is free
real estate in the first line. Hence this stylesheet uses convoluted math to allow unpinned tabs
back in the first line when they no longer fit a single line.

All of this is agnostic regarding the width of the tabbrowser and number and width of pinned tabs.*/

#tabbrowser-tabs { 
  /* Changing the following variable to a lower value would escalate the number of rules required 
  to make this work on ultrawide devices. With 100px it will work up to a screen width of 4k.*/
  --multirow-tab-min-width: 100px !important;
  --tbbtw: calc(2 * (var(--toolbarbutton-inner-padding) + var(--toolbarbutton-outer-padding)) + 16px);
  --mrtmw: var(--multirow-tab-min-width);
  --mptw: calc(max(calc(36px + var(--tab-overflow-pinned-tabs-width)), 36px) - 36px);
  --nlot: 0; 
}

/* If Firefox' browser.css supported reset-counter(reversed()), the following section could 
be much shorter. As of now there seems to be no way to assign these variables dynamically. */

tab:nth-last-of-type( 1){--nlot: 1;} tab:nth-last-of-type( 2){--nlot: 2;}
tab:nth-last-of-type( 3){--nlot: 3;} tab:nth-last-of-type( 4){--nlot: 4;}
tab:nth-last-of-type( 5){--nlot: 5;} tab:nth-last-of-type( 6){--nlot: 6;}
tab:nth-last-of-type( 7){--nlot: 7;} tab:nth-last-of-type( 8){--nlot: 8;}
tab:nth-last-of-type( 9){--nlot: 9;} tab:nth-last-of-type(10){--nlot:10;}
tab:nth-last-of-type(11){--nlot:11;} tab:nth-last-of-type(12){--nlot:12;}
tab:nth-last-of-type(13){--nlot:13;} tab:nth-last-of-type(14){--nlot:14;}
tab:nth-last-of-type(15){--nlot:15;} tab:nth-last-of-type(16){--nlot:16;}
tab:nth-last-of-type(17){--nlot:17;} tab:nth-last-of-type(18){--nlot:18;}
tab:nth-last-of-type(19){--nlot:19;} tab:nth-last-of-type(20){--nlot:20;}
tab:nth-last-of-type(21){--nlot:21;} tab:nth-last-of-type(22){--nlot:22;}
tab:nth-last-of-type(23){--nlot:23;} tab:nth-last-of-type(24){--nlot:24;}
tab:nth-last-of-type(25){--nlot:25;} tab:nth-last-of-type(26){--nlot:26;}
tab:nth-last-of-type(27){--nlot:27;} tab:nth-last-of-type(28){--nlot:28;}
tab:nth-last-of-type(29){--nlot:29;} tab:nth-last-of-type(30){--nlot:30;}

[first-visible-unpinned-tab="true"]     { 
  /* This creates a right margin for the first unpinned tab equal to the 
  minimum width of all other unpinned tabs and the new tab button combined,
  but disables the margin when all unpinned tabs no longer fit one row. */
  --tw: calc((var(--nlot) - 1) * var(--mrtmw) + var(--tbbtw));
  margin-right: calc(       var(--tw) - max((min(((var(--tw) - 100%) * 9999), 100%)), 0px)) !important; 
}
[first-visible-unpinned-tab="true"] + * { 
  /* This creates a corresponding negative margin for the second unpinned
  tab. The result is that all unpinned tabs break to the next line as a
  group, but only if they all actually fit one row. */
  --tw: calc( var(--nlot)      * var(--mrtmw) + var(--tbbtw));
  margin-left:  calc(0px - (var(--tw) - max((min(((var(--tw) - 100%) * 9999), 100%)), 0px))) !important;
}
